using System;
using System.Collections.Generic;
using System.Linq;

namespace Risotto.LINQ
{
	static partial class LINQExtensions
	{
		/// <summary>
		/// Checks if all elements in the IEnumerable are unique.
		/// </summary>
		/// <typeparam name="TSource">The type of the elements of source.</typeparam>
		/// <param name="source">The source sequence.</param>
		/// <returns><c>True</c> if the elements of the IEnumerable are all unique, <c>False</c> otherwise.</returns>
		public static bool AllUnique<TSource>(this IEnumerable<TSource> source)
		{
			if (source == null)
				throw new ArgumentNullException(nameof(source));

			return source.Count() == source.Distinct().Count();
		}

		/// <summary>
		/// Checks if all elements in the sequence are unique, based on the provided mapping function.
		/// </summary>
		/// <typeparam name="TSource">The type of the elements of source.</typeparam>
		/// <typeparam name="TResult">The type of the elements generated by the mapping function.</typeparam>
		/// <param name="source">The source sequence.</param>
		/// <param name="fn">The mapping function.</param>
		/// <returns><c>True</c> if the values of the sequence, after being processed, <c>False</c> otherwise.</returns>
		public static bool AllUnique<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> fn)
		{
			if (source == null)
				throw new ArgumentNullException(nameof(source));
			if (fn == null)
				throw new ArgumentNullException(nameof(fn));

			List<TResult> processed = new List<TResult>();

			foreach (var entry in source)
				processed.Add(fn(entry));

			return source.Count() == processed.Distinct().Count();
		}
	}
}
